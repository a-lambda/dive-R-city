[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Bienvenue",
    "section": "",
    "text": "Premier post informel. Bienvenue !\n\nJ’ai repris cette image mais le smartphone me semble de trop ici."
  },
  {
    "objectID": "posts/20241224_post-with-code/index.html",
    "href": "posts/20241224_post-with-code/index.html",
    "title": "List files without directory part",
    "section": "",
    "text": "Get the list of files recursively from a directory (without the folder part in the filename if it does exist)\n\n\nCode\nlibrary(stringi) # stri_split_fixed\nlibrary(purrr)   # map\nlibrary(microbenchmark)\n\n\n\nfunction list_of_files\n\nlist_of_files &lt;- function(path, ...) {\n  \n  return(\n    list.files(path = path, ...) |&gt;\n      map(\\(x) {tail(stri_split_fixed(x, \"/\")[[1]], n = 1)}) |&gt; \n      unlist()\n  )\n  \n}\n\n\n\nbenchmarking comparisons\n\n\nCode\ndir_test &lt;- getwd()\n\nmicrobenchmark(\n  list_of_files(path = dir_test, recursive = TRUE),\n  list.files(path = dir_test, recursive = TRUE)\n  \n)\n\n\nUnit: microseconds\n                                             expr   min     lq    mean median\n list_of_files(path = dir_test, recursive = TRUE) 164.1 166.65 216.337  174.3\n    list.files(path = dir_test, recursive = TRUE)  83.0  85.50  92.800   87.9\n     uq    max neval\n 177.75 3496.4   100\n  99.75  122.9   100\n\n\n\n\nresults when applying\n\nlist.files(path = \"../\", recursive = TRUE) |&gt; tail(n = 10)\n\n[1] \"_metadata.yml\"                          \n[2] \"20241224_post-with-code/image.jpg\"      \n[3] \"20241224_post-with-code/index.qmd\"      \n[4] \"20241224_post-with-code/index.rmarkdown\"\n[5] \"20241225_post_with_code/image.jpg\"      \n[6] \"20241225_post_with_code/index.qmd\"      \n[7] \"welcome/index.qmd\"                      \n[8] \"welcome/thumbnail.jpg\"                  \n\nlist_of_files(path = \"../\", recursive = TRUE) |&gt;  tail(n = 10)\n\n[1] \"_metadata.yml\"   \"image.jpg\"       \"index.qmd\"       \"index.rmarkdown\"\n[5] \"image.jpg\"       \"index.qmd\"       \"index.qmd\"       \"thumbnail.jpg\""
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "A propos",
    "section": "",
    "text": "Un bac à sable de plus … :)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "dive-R-city",
    "section": "",
    "text": "Get geographic squares\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nDec 25, 2024\n\n\nAlcor\n\n\n\n\n\n\n\n\n\n\n\n\nList files without directory part\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nDec 24, 2024\n\n\nAlcor\n\n\n\n\n\n\n\n\n\n\n\n\nBienvenue\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nDec 23, 2024\n\n\nAlcor\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/20241225_post_with_code/index.html",
    "href": "posts/20241225_post_with_code/index.html",
    "title": "Get geographic squares",
    "section": "",
    "text": "Code\nlibrary(ggplot2)\nlibrary(sf)\n\n\nLinking to GEOS 3.12.2, GDAL 3.9.3, PROJ 9.4.1; sf_use_s2() is TRUE\n\n\nCode\nlibrary(s2)\nlibrary(microbenchmark)\nlibrary(purrr)\n\n\n\n\n\n# fonction génératrice de \"carré géographique\" de `alpha` degrés de côté\n# le point de base (lon, lat) est le point inférieur gauche. \n\nget_geo_square &lt;- function(lon, lat, alpha) {\n  \n  points &lt;- list(rbind(\n    c(lon, lat),\n    c(lon + alpha, lat),\n    c(lon + alpha, lat + alpha),\n    c(lon, lat + alpha),\n    c(lon, lat)\n  ))\n  st_polygon(points)\n  \n}\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nLa fonction renvoie un résultat si l’angle \\(\\alpha\\) vérifie la condition :\n\\[90^\\circ\\space\\bmod\\space\\alpha = 0\\]\n\n\n\n\n\n\n\nget_all_geo_squares_on_sphere &lt;- function(alpha) {\n  \n  if (90 %% alpha == 0) {\n    \n    n &lt;- 90 / alpha\n    dim_lon &lt;- 4 * n\n    dim_lat &lt;- 2 * n\n    lon &lt;- seq(-180, 180 - alpha, by = alpha)\n    lat &lt;- seq(-90, 90 - alpha, by = alpha)\n    coord &lt;- expand.grid(lon, lat)\n    names(coord) &lt;- c(\"lon\", \"lat\")\n    geom &lt;- map2(coord$lon, coord$lat, \\(x, y) {get_geo_square(x, y, alpha)}) |&gt; \n      st_as_sfc(crs = st_crs(4326))\n    return(geom)\n  } else {\n    return(NULL)\n  }\n  \n}\n\n\n\n\n\n\nCode\nmicrobenchmark(\n  get_all_geo_squares_on_sphere(alpha = 10),\n  get_all_geo_squares_on_sphere(alpha = 1),\n  times = 10\n)\n\n\nUnit: milliseconds\n                                      expr       min        lq       mean\n get_all_geo_squares_on_sphere(alpha = 10)   25.0773   25.2246   27.24317\n  get_all_geo_squares_on_sphere(alpha = 1) 2709.7570 2799.3098 2844.28755\n    median        uq       max neval\n   27.0214   29.0937   29.9343    10\n 2859.2008 2890.4651 2933.5284    10\n\n\n\n\n\n\ngeo_squares &lt;- get_all_geo_squares_on_sphere(alpha = 10)\n\ngeo_centroids &lt;- geo_squares |&gt; \n  st_centroid()\n\nggplot() +\n  geom_sf(data = geo_squares) +\n  geom_sf(data = geo_centroids, color = \"red\")\n\n\n\n\n\n\n\n#--------------------------------------------------\n\ngeo_squares_moll &lt;- st_transform(\n  geo_squares,\n  crs = \"+proj=moll\"\n)\n\ngeo_centroids_moll &lt;- st_transform(\n  geo_centroids,\n  crs = \"+proj=moll\"\n)\n\nggplot() +\n  geom_sf(data = geo_squares_moll) +\n  geom_sf(data = geo_centroids_moll, color = \"red\", cex = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\nget_s2_square &lt;- function(lon, lat, alpha) {\n  \n  points &lt;- rbind(\n    c(lon, lat),\n    c(lon + alpha, lat),\n    c(lon + alpha, lat + alpha),\n    c(lon, lat + alpha),\n    c(lon, lat)\n  )\n  s2_make_polygon(points[, 1], points[, 2])\n  \n}\n\nfunction get_all_s2_squares_on_sphere\n\nget_all_s2_squares_on_sphere &lt;- function(alpha) {\n  \n  if (90 %% alpha == 0) {\n    \n    n &lt;- 90 / alpha\n    dim_lon &lt;- 4 * n\n    dim_lat &lt;- 2 * n\n    lon &lt;- seq(-180, 180 - alpha, by = alpha)\n    lat &lt;- seq(-90, 90 - alpha, by = alpha)\n    coord &lt;- expand.grid(lon, lat)\n    names(coord) &lt;- c(\"lon\", \"lat\")\n    geom &lt;- map2(coord$lon, coord$lat, \\(x, y) {get_s2_square(x, y, alpha)}) |&gt;\n      map(st_as_sfc) |&gt; \n      unlist(recursive = FALSE) |&gt; \n      st_as_sfc(crs = st_crs(4326))\n    return(geom)\n  } else {\n    return(NULL)\n  }\n  \n}\n\n\n\n\n\n\nCode\nmicrobenchmark(\n  get_all_s2_squares_on_sphere(alpha = 10),\n  get_all_s2_squares_on_sphere(alpha = 1),\n  times = 10\n)\n\n\nUnit: milliseconds\n                                     expr        min        lq       mean\n get_all_s2_squares_on_sphere(alpha = 10)   533.3661   577.013   597.9345\n  get_all_s2_squares_on_sphere(alpha = 1) 62972.2074 63584.069 64809.0446\n     median         uq        max neval\n   595.4653   630.0597   672.2537    10\n 64690.3996 66105.6728 66468.2610    10\n\n\n\n\n\n\ns2_squares &lt;- get_all_s2_squares_on_sphere(alpha = 10)\n\ns2_centroids &lt;- s2_squares |&gt; \n  st_centroid()\n\nggplot(data = s2_squares) +\n  geom_sf() +\n  geom_sf(data = s2_centroids, color = \"red\")\n\n\n\n\n\n\n\n#--------------------------------------------------\n\ns2_squares_moll &lt;- st_transform(\n  s2_squares,\n  crs = \"+proj=moll\"\n)\n\ns2_centroids_moll &lt;- st_transform(\n  s2_centroids,\n  crs = \"+proj=moll\"\n)\n\nggplot() +\n  geom_sf(data = s2_squares_moll) +\n  geom_sf(data = s2_centroids_moll, color = \"red\", cex = 0.5)"
  },
  {
    "objectID": "posts/20241225_post_with_code/index.html#get-geographic-squares",
    "href": "posts/20241225_post_with_code/index.html#get-geographic-squares",
    "title": "Get geographic squares",
    "section": "",
    "text": "Code\nlibrary(ggplot2)\nlibrary(sf)\n\n\nLinking to GEOS 3.12.2, GDAL 3.9.3, PROJ 9.4.1; sf_use_s2() is TRUE\n\n\nCode\nlibrary(s2)\nlibrary(microbenchmark)\nlibrary(purrr)\n\n\n\n\n\n# fonction génératrice de \"carré géographique\" de `alpha` degrés de côté\n# le point de base (lon, lat) est le point inférieur gauche. \n\nget_geo_square &lt;- function(lon, lat, alpha) {\n  \n  points &lt;- list(rbind(\n    c(lon, lat),\n    c(lon + alpha, lat),\n    c(lon + alpha, lat + alpha),\n    c(lon, lat + alpha),\n    c(lon, lat)\n  ))\n  st_polygon(points)\n  \n}\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nLa fonction renvoie un résultat si l’angle \\(\\alpha\\) vérifie la condition :\n\\[90^\\circ\\space\\bmod\\space\\alpha = 0\\]\n\n\n\n\n\n\n\nget_all_geo_squares_on_sphere &lt;- function(alpha) {\n  \n  if (90 %% alpha == 0) {\n    \n    n &lt;- 90 / alpha\n    dim_lon &lt;- 4 * n\n    dim_lat &lt;- 2 * n\n    lon &lt;- seq(-180, 180 - alpha, by = alpha)\n    lat &lt;- seq(-90, 90 - alpha, by = alpha)\n    coord &lt;- expand.grid(lon, lat)\n    names(coord) &lt;- c(\"lon\", \"lat\")\n    geom &lt;- map2(coord$lon, coord$lat, \\(x, y) {get_geo_square(x, y, alpha)}) |&gt; \n      st_as_sfc(crs = st_crs(4326))\n    return(geom)\n  } else {\n    return(NULL)\n  }\n  \n}\n\n\n\n\n\n\nCode\nmicrobenchmark(\n  get_all_geo_squares_on_sphere(alpha = 10),\n  get_all_geo_squares_on_sphere(alpha = 1),\n  times = 10\n)\n\n\nUnit: milliseconds\n                                      expr       min        lq       mean\n get_all_geo_squares_on_sphere(alpha = 10)   25.0773   25.2246   27.24317\n  get_all_geo_squares_on_sphere(alpha = 1) 2709.7570 2799.3098 2844.28755\n    median        uq       max neval\n   27.0214   29.0937   29.9343    10\n 2859.2008 2890.4651 2933.5284    10\n\n\n\n\n\n\ngeo_squares &lt;- get_all_geo_squares_on_sphere(alpha = 10)\n\ngeo_centroids &lt;- geo_squares |&gt; \n  st_centroid()\n\nggplot() +\n  geom_sf(data = geo_squares) +\n  geom_sf(data = geo_centroids, color = \"red\")\n\n\n\n\n\n\n\n#--------------------------------------------------\n\ngeo_squares_moll &lt;- st_transform(\n  geo_squares,\n  crs = \"+proj=moll\"\n)\n\ngeo_centroids_moll &lt;- st_transform(\n  geo_centroids,\n  crs = \"+proj=moll\"\n)\n\nggplot() +\n  geom_sf(data = geo_squares_moll) +\n  geom_sf(data = geo_centroids_moll, color = \"red\", cex = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\nget_s2_square &lt;- function(lon, lat, alpha) {\n  \n  points &lt;- rbind(\n    c(lon, lat),\n    c(lon + alpha, lat),\n    c(lon + alpha, lat + alpha),\n    c(lon, lat + alpha),\n    c(lon, lat)\n  )\n  s2_make_polygon(points[, 1], points[, 2])\n  \n}\n\nfunction get_all_s2_squares_on_sphere\n\nget_all_s2_squares_on_sphere &lt;- function(alpha) {\n  \n  if (90 %% alpha == 0) {\n    \n    n &lt;- 90 / alpha\n    dim_lon &lt;- 4 * n\n    dim_lat &lt;- 2 * n\n    lon &lt;- seq(-180, 180 - alpha, by = alpha)\n    lat &lt;- seq(-90, 90 - alpha, by = alpha)\n    coord &lt;- expand.grid(lon, lat)\n    names(coord) &lt;- c(\"lon\", \"lat\")\n    geom &lt;- map2(coord$lon, coord$lat, \\(x, y) {get_s2_square(x, y, alpha)}) |&gt;\n      map(st_as_sfc) |&gt; \n      unlist(recursive = FALSE) |&gt; \n      st_as_sfc(crs = st_crs(4326))\n    return(geom)\n  } else {\n    return(NULL)\n  }\n  \n}\n\n\n\n\n\n\nCode\nmicrobenchmark(\n  get_all_s2_squares_on_sphere(alpha = 10),\n  get_all_s2_squares_on_sphere(alpha = 1),\n  times = 10\n)\n\n\nUnit: milliseconds\n                                     expr        min        lq       mean\n get_all_s2_squares_on_sphere(alpha = 10)   533.3661   577.013   597.9345\n  get_all_s2_squares_on_sphere(alpha = 1) 62972.2074 63584.069 64809.0446\n     median         uq        max neval\n   595.4653   630.0597   672.2537    10\n 64690.3996 66105.6728 66468.2610    10\n\n\n\n\n\n\ns2_squares &lt;- get_all_s2_squares_on_sphere(alpha = 10)\n\ns2_centroids &lt;- s2_squares |&gt; \n  st_centroid()\n\nggplot(data = s2_squares) +\n  geom_sf() +\n  geom_sf(data = s2_centroids, color = \"red\")\n\n\n\n\n\n\n\n#--------------------------------------------------\n\ns2_squares_moll &lt;- st_transform(\n  s2_squares,\n  crs = \"+proj=moll\"\n)\n\ns2_centroids_moll &lt;- st_transform(\n  s2_centroids,\n  crs = \"+proj=moll\"\n)\n\nggplot() +\n  geom_sf(data = s2_squares_moll) +\n  geom_sf(data = s2_centroids_moll, color = \"red\", cex = 0.5)"
  }
]