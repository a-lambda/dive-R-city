[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Bienvenue",
    "section": "",
    "text": "Premier post informel. Bienvenue !\n\nJ’ai repris cette image mais le smartphone me semble de trop ici."
  },
  {
    "objectID": "posts/20241224_post-with-code/index.html",
    "href": "posts/20241224_post-with-code/index.html",
    "title": "List files without directory part",
    "section": "",
    "text": "Get the list of files recursively from a directory (without the folder part in the filename if it does exist)\n\n\nCode\nlibrary(stringi) # stri_split_fixed\nlibrary(purrr)   # map\nlibrary(microbenchmark)\n\n\n\nfunction list_of_files\n\nlist_of_files &lt;- function(path, ...) {\n  \n  return(\n    list.files(path = path, ...) |&gt;\n      map(\\(x) {tail(stri_split_fixed(x, \"/\")[[1]], n = 1)}) |&gt; \n      unlist()\n  )\n  \n}\n\n\n\nbenchmarking comparisons\n\n\nCode\ndir_test &lt;- getwd()\n\nmicrobenchmark(\n  list_of_files(path = dir_test, recursive = TRUE),\n  list.files(path = dir_test, recursive = TRUE)\n  \n)\n\n\nUnit: microseconds\n                                             expr     min       lq      mean\n list_of_files(path = dir_test, recursive = TRUE) 161.501 168.9515 228.73003\n    list.files(path = dir_test, recursive = TRUE)  80.501  85.1505  97.29597\n  median      uq      max neval\n 176.151 182.101 3516.701   100\n  97.001  99.551  242.101   100\n\n\n\n\nresults when applying\n\nlist.files(path = \"../\", recursive = TRUE) |&gt; tail(n = 10)\n\n[1] \"_metadata.yml\"                          \n[2] \"20241224_post-with-code/image.jpg\"      \n[3] \"20241224_post-with-code/index.qmd\"      \n[4] \"20241224_post-with-code/index.rmarkdown\"\n[5] \"20241225_post_with_code/image.jpg\"      \n[6] \"20241225_post_with_code/index.qmd\"      \n[7] \"welcome/index.qmd\"                      \n[8] \"welcome/thumbnail.jpg\"                  \n\nlist_of_files(path = \"../\", recursive = TRUE) |&gt;  tail(n = 10)\n\n[1] \"_metadata.yml\"   \"image.jpg\"       \"index.qmd\"       \"index.rmarkdown\"\n[5] \"image.jpg\"       \"index.qmd\"       \"index.qmd\"       \"thumbnail.jpg\""
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "A propos",
    "section": "",
    "text": "Un bac à sable de plus … :)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "dive-R-city",
    "section": "",
    "text": "Get geographic squares\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nDec 25, 2024\n\n\nAlcor\n\n\n\n\n\n\n\n\n\n\n\n\nList files without directory part\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nDec 24, 2024\n\n\nAlcor\n\n\n\n\n\n\n\n\n\n\n\n\nBienvenue\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nDec 23, 2024\n\n\nAlcor\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/20241225_post_with_code/index.html",
    "href": "posts/20241225_post_with_code/index.html",
    "title": "Get geographic squares",
    "section": "",
    "text": "Code\nlibrary(ggplot2)\nlibrary(sf)\n\n\nLinking to GEOS 3.12.2, GDAL 3.9.3, PROJ 9.4.1; sf_use_s2() is TRUE\n\n\nCode\nlibrary(s2)\nlibrary(microbenchmark)\nlibrary(purrr)\n\n\n\n\n\n# fonction génératrice de \"carré géographique\" de `alpha` degrés de côté\n# le point de base (lon, lat) est le point inférieur gauche. \n\nget_geo_square &lt;- function(lon, lat, alpha) {\n  \n  points &lt;- list(rbind(\n    c(lon, lat),\n    c(lon + alpha, lat),\n    c(lon + alpha, lat + alpha),\n    c(lon, lat + alpha),\n    c(lon, lat)\n  ))\n  st_polygon(points)\n  \n}\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nLa fonction renvoie un résultat si l’angle \\(\\alpha\\) vérifie la condition :\n\\[90^\\circ\\space\\bmod\\space\\alpha = 0\\]\n\n\n\n\n\n\n\nget_all_geo_squares_on_sphere &lt;- function(alpha) {\n  \n  if (90 %% alpha == 0) {\n    \n    n &lt;- 90 / alpha\n    dim_lon &lt;- 4 * n\n    dim_lat &lt;- 2 * n\n    lon &lt;- seq(-180, 180 - alpha, by = alpha)\n    lat &lt;- seq(-90, 90 - alpha, by = alpha)\n    coord &lt;- expand.grid(lon, lat)\n    names(coord) &lt;- c(\"lon\", \"lat\")\n    geom &lt;- map2(coord$lon, coord$lat, \\(x, y) {get_geo_square(x, y, alpha)}) |&gt; \n      st_as_sfc(crs = st_crs(4326))\n    return(geom)\n  } else {\n    return(NULL)\n  }\n  \n}\n\n\n\n\n\n\nCode\nmicrobenchmark(\n  get_all_geo_squares_on_sphere(alpha = 10),\n  get_all_geo_squares_on_sphere(alpha = 1),\n  times = 10\n)\n\n\nUnit: milliseconds\n                                      expr       min        lq       mean\n get_all_geo_squares_on_sphere(alpha = 10)   24.4958   25.2046   28.37118\n  get_all_geo_squares_on_sphere(alpha = 1) 2663.1680 2811.3382 2829.11605\n     median        uq       max neval\n   27.06515   29.4957   40.9136    10\n 2846.40660 2885.2202 2898.9181    10\n\n\n\n\n\n\ngeo_squares &lt;- get_all_geo_squares_on_sphere(alpha = 10)\n\ngeo_centroids &lt;- geo_squares |&gt; \n  st_centroid()\n\nggplot() +\n  geom_sf(data = geo_squares) +\n  geom_sf(data = geo_centroids, color = \"red\")\n\n\n\n\n\n\n\n#--------------------------------------------------\n\ngeo_squares_moll &lt;- st_transform(\n  geo_squares,\n  crs = \"+proj=moll\"\n)\n\ngeo_centroids_moll &lt;- st_transform(\n  geo_centroids,\n  crs = \"+proj=moll\"\n)\n\nggplot() +\n  geom_sf(data = geo_squares_moll) +\n  geom_sf(data = geo_centroids_moll, color = \"red\", cex = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\n\n\nUNDER CONSTRUCTION\n\n\n\n\n\n\n\nget_s2_square &lt;- function(lon, lat, alpha) {\n  \n  points &lt;- rbind(\n    c(lon, lat),\n    c(lon + alpha, lat),\n    c(lon + alpha, lat + alpha),\n    c(lon, lat + alpha),\n    c(lon, lat)\n  )\n  s2_make_polygon(points[, 1], points[, 2])\n  \n}\n\nfunction get_all_s2_squares_on_sphere\n\nget_all_s2_squares_on_sphere &lt;- function(alpha) {\n  \n  if (90 %% alpha == 0) {\n    \n    n &lt;- 90 / alpha\n    dim_lon &lt;- 4 * n\n    dim_lat &lt;- 2 * n\n    lon &lt;- seq(-180, 180 - alpha, by = alpha)\n    lat &lt;- seq(-90, 90 - alpha, by = alpha)\n    coord &lt;- expand.grid(lon, lat)\n    names(coord) &lt;- c(\"lon\", \"lat\")\n    geom &lt;- map2(coord$lon, coord$lat, \\(x, y) {get_s2_square(x, y, alpha)}) |&gt; \n      map(st_as_sfc)\n    return(geom)\n  } else {\n    return(NULL)\n  }\n  \n}\n\n\none_degree_side_s2_squares &lt;- get_all_s2_squares_on_sphere(alpha = 30)\n\n# one_degree_side_s2_squares is a list of sfc \n# It must be transformed into a single sfc\n\n# ggplot(data = one_degree_side_s2_squares) +\n#   geom_sf()\n# \n# one_degree_side_s2_squares_2 &lt;- st_transform(\n#   one_degree_side_s2_squares,\n#   crs = \"+proj=moll\"\n# )\n# ggplot(data = one_degree_side_s2_squares_2) +\n#   geom_sf()"
  },
  {
    "objectID": "posts/20241225_post_with_code/index.html#get-geographic-squares",
    "href": "posts/20241225_post_with_code/index.html#get-geographic-squares",
    "title": "Get geographic squares",
    "section": "",
    "text": "Code\nlibrary(ggplot2)\nlibrary(sf)\n\n\nLinking to GEOS 3.12.2, GDAL 3.9.3, PROJ 9.4.1; sf_use_s2() is TRUE\n\n\nCode\nlibrary(s2)\nlibrary(microbenchmark)\nlibrary(purrr)\n\n\n\n\n\n# fonction génératrice de \"carré géographique\" de `alpha` degrés de côté\n# le point de base (lon, lat) est le point inférieur gauche. \n\nget_geo_square &lt;- function(lon, lat, alpha) {\n  \n  points &lt;- list(rbind(\n    c(lon, lat),\n    c(lon + alpha, lat),\n    c(lon + alpha, lat + alpha),\n    c(lon, lat + alpha),\n    c(lon, lat)\n  ))\n  st_polygon(points)\n  \n}\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nLa fonction renvoie un résultat si l’angle \\(\\alpha\\) vérifie la condition :\n\\[90^\\circ\\space\\bmod\\space\\alpha = 0\\]\n\n\n\n\n\n\n\nget_all_geo_squares_on_sphere &lt;- function(alpha) {\n  \n  if (90 %% alpha == 0) {\n    \n    n &lt;- 90 / alpha\n    dim_lon &lt;- 4 * n\n    dim_lat &lt;- 2 * n\n    lon &lt;- seq(-180, 180 - alpha, by = alpha)\n    lat &lt;- seq(-90, 90 - alpha, by = alpha)\n    coord &lt;- expand.grid(lon, lat)\n    names(coord) &lt;- c(\"lon\", \"lat\")\n    geom &lt;- map2(coord$lon, coord$lat, \\(x, y) {get_geo_square(x, y, alpha)}) |&gt; \n      st_as_sfc(crs = st_crs(4326))\n    return(geom)\n  } else {\n    return(NULL)\n  }\n  \n}\n\n\n\n\n\n\nCode\nmicrobenchmark(\n  get_all_geo_squares_on_sphere(alpha = 10),\n  get_all_geo_squares_on_sphere(alpha = 1),\n  times = 10\n)\n\n\nUnit: milliseconds\n                                      expr       min        lq       mean\n get_all_geo_squares_on_sphere(alpha = 10)   24.4958   25.2046   28.37118\n  get_all_geo_squares_on_sphere(alpha = 1) 2663.1680 2811.3382 2829.11605\n     median        uq       max neval\n   27.06515   29.4957   40.9136    10\n 2846.40660 2885.2202 2898.9181    10\n\n\n\n\n\n\ngeo_squares &lt;- get_all_geo_squares_on_sphere(alpha = 10)\n\ngeo_centroids &lt;- geo_squares |&gt; \n  st_centroid()\n\nggplot() +\n  geom_sf(data = geo_squares) +\n  geom_sf(data = geo_centroids, color = \"red\")\n\n\n\n\n\n\n\n#--------------------------------------------------\n\ngeo_squares_moll &lt;- st_transform(\n  geo_squares,\n  crs = \"+proj=moll\"\n)\n\ngeo_centroids_moll &lt;- st_transform(\n  geo_centroids,\n  crs = \"+proj=moll\"\n)\n\nggplot() +\n  geom_sf(data = geo_squares_moll) +\n  geom_sf(data = geo_centroids_moll, color = \"red\", cex = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\n\n\nUNDER CONSTRUCTION\n\n\n\n\n\n\n\nget_s2_square &lt;- function(lon, lat, alpha) {\n  \n  points &lt;- rbind(\n    c(lon, lat),\n    c(lon + alpha, lat),\n    c(lon + alpha, lat + alpha),\n    c(lon, lat + alpha),\n    c(lon, lat)\n  )\n  s2_make_polygon(points[, 1], points[, 2])\n  \n}\n\nfunction get_all_s2_squares_on_sphere\n\nget_all_s2_squares_on_sphere &lt;- function(alpha) {\n  \n  if (90 %% alpha == 0) {\n    \n    n &lt;- 90 / alpha\n    dim_lon &lt;- 4 * n\n    dim_lat &lt;- 2 * n\n    lon &lt;- seq(-180, 180 - alpha, by = alpha)\n    lat &lt;- seq(-90, 90 - alpha, by = alpha)\n    coord &lt;- expand.grid(lon, lat)\n    names(coord) &lt;- c(\"lon\", \"lat\")\n    geom &lt;- map2(coord$lon, coord$lat, \\(x, y) {get_s2_square(x, y, alpha)}) |&gt; \n      map(st_as_sfc)\n    return(geom)\n  } else {\n    return(NULL)\n  }\n  \n}\n\n\none_degree_side_s2_squares &lt;- get_all_s2_squares_on_sphere(alpha = 30)\n\n# one_degree_side_s2_squares is a list of sfc \n# It must be transformed into a single sfc\n\n# ggplot(data = one_degree_side_s2_squares) +\n#   geom_sf()\n# \n# one_degree_side_s2_squares_2 &lt;- st_transform(\n#   one_degree_side_s2_squares,\n#   crs = \"+proj=moll\"\n# )\n# ggplot(data = one_degree_side_s2_squares_2) +\n#   geom_sf()"
  }
]