---
title: "R CRAN Packages (3/5)"
author: "Alcor"
date: "2025-01-19"
categories: [news, code, analysis]
image: "image.jpg"
---

## R packages emails from `Authors@R` column

```{r}
#| label: load_libraries
#| code-fold: true
#| warning: false
#| 
library(purrr)
library(tools)
library(dplyr)
library(tibble)
library(ggplot2)
library(stringi)
library(gt)
```

::: {.callout-note collapse="false"}

Les champs conservés dans la suite de l'étude sont :

  - ceux dont les données ne présentent aucune valeur `NA`.
  - le champ `Authors@R` qui comporte des informations textes intéressantes
  
:::

### Simplification du data.frame d'étude

```{r}
#| label: CRAN_package_db_simplified

pdb_CRAN <- tools::CRAN_package_db()

fields <- c(
  "Package", "Version", "Depends", "License", "MD5sum", 
  "NeedsCompilation", "Author", "Authors@R", "Date/Publication", 
  "Description", "Maintainer", "Packaged", "Title", "Published")

pdb <- pdb_CRAN |> 
  dplyr::select(all_of(fields))

```

### Récupération des adresses de messagerie

  - détermination du nombre de mails à trouver dans la colonne `Authors@R`

```{r}
#| label: emails_count_estimated
#| code-fold: true

authorsR <- pdb$`Authors@R`

emails_count_per_pdb_row <- authorsR |> 
  stri_count_regex(pattern = "[@]")
# NA is considered to be total 0
emails_count_per_pdb_row[is.na(emails_count_per_pdb_row)] <- 0
emails_total_estimated <- emails_count_per_pdb_row |> sum()
emails_total_estimated

```

::: {.callout-note collapse="false"}

Le nombre de mails à trouver correspond au nombre de symboles `@` présents dans l'ensemble des données de la colonne `Authors@R`, soit ici : **`r emails_total_estimated`**

:::

  1) fonction `match_email_in_authors`

```{r}
#| label: match_emails_in_authorsR
#| 
match_emails_in_authorsR <- function(str) {
  
  pattern_email    <- "[\"|'|[ ]|[<]]([^\"|']+?)[@]{1}(.+?)[\"|'|[ ]|[>]]"
  resultat <- stringi::stri_match_all_regex(
              str = str, 
              pattern = pattern_email,
              omit_no_match = FALSE)[[1]]
  
  return(resultat)

}

```

  2) extraction des emails

on récupère les matrices de correspondances de pattern pour chacun des champs `Authors@R`

```{r}
#| label: extract_emails
#| 
emails_in_authorsR <- authorsR |> 
  map(match_emails_in_authorsR)

head(emails_in_authorsR, n = 3)
length(emails_in_authorsR)

```

  3) Récupération du nombre de lignes pour chacune des matrices 

```{r}
#| label: match_lines_per_pdb_row

match_lines_per_pdb_row <- emails_in_authorsR |> 
  map(nrow) |>
  unlist()

match_lines_per_pdb_row[1:100]

```

  4) transformation des `r nrow(pdb)` matrices en une seule matrice

```{r}
#| label: mat_emails_in_authorsR

temp_mat_emails_in_authorsR <- do.call(rbind, emails_in_authorsR)

mat_emails_in_authorsR <- cbind(
  rep(x = pdb$Package, match_lines_per_pdb_row),
  rep(x = pdb$Version, match_lines_per_pdb_row),
  rep(x = pdb$Depends, match_lines_per_pdb_row),
  temp_mat_emails_in_authorsR[,c(2,3)])

mat_emails_in_authorsR[1:10, c(1,4,5)]

```

  5) puis en un tibble

```{r}
#| label: tbl_emails_in_authorsR

tbl_emails_in_authorsR <- as_tibble(mat_emails_in_authorsR) |> 
  rename(Package = V1, 
         Version = V2,
         Depends = V3,
        email_id = V4, 
    email_domain = V5) |> 
  unique()

tbl_emails_in_authorsR

```

  6) résumé par ligne du data.frame `pdb`

```{r}
#| label: summary_emails_per_pdb_row
#| 
summary_emails_per_pdb_row <- tbl_emails_in_authorsR |> 
  mutate(n = if_else(is.na(email_id) & is.na(email_domain), 0, 1)) |> 
  summarize(.by = c(Package, Version, Depends), emails_count = sum(n)) |> 
  mutate(emails_count_estimated = emails_count_per_pdb_row)

summary_emails_per_pdb_row

summary_emails_per_pdb_row |> summarize(total_emails = sum(emails_count))
  
```

  7) récupération des lignes du data.frame `pdb` où il y a un problème
  
On compare la valeur du champ `emails_count` à celle du champ `emails_count_estimated`

```{r}

bad_emails_count_rows <- summary_emails_per_pdb_row |> 
  mutate(difference = emails_count_estimated - emails_count) |> 
  filter(difference != 0)

bad_emails_count_rows |> summarize(difference_totale = sum(difference))

print(bad_emails_count_rows, n = nrow(bad_emails_count_rows))

```

L'examen des champs `Authors` correspondant aux packages `r names(bad_emails_count_rows$Package)` montre que le nombre d'emails a été surestimé par le décompte du nombre de symboles `@`.

En effet on note la présence de nombreux items au format `@<chaine de caractères>` qui ne respectent pas le format standart d'une adresse de messagerie. 

Exemple pour le paquet `easystats`:

```{r}
#| label: select_bad_row

select_bad_row <- function(pkg) {
  
  bad_emails <- bad_emails_count_rows |> 
    left_join(pdb, by = c("Package", "Version", "Depends")) |> 
    select(Package, `Authors@R`) |> 
    filter(Package == pkg) |> 
    pull() |> 
    stri_match_all_regex(pattern = "\"([@][A-Za-z\\.]+)")
  return(bad_emails[[1]][,2])
  
}

select_bad_row(pkg = "easystats") 

```

  8) fonction `match_tld_in_email_domain`

```{r}
#| label: match_tld_in_email_domain
#| 
match_tld_in_email_domain <- function(str) {
  
  pattern_tld    <- "([^[.]]+$)"
  resultat <- stringi::stri_match_all_regex(
              str = str, 
              pattern = pattern_tld,
              omit_no_match = FALSE)[[1]]
  
  return(resultat[,2])

}

```

  9) Extraction des TLDs

```{r}
#| label: extract_TLD

mail_tlds <- tbl_emails_in_authorsR$email_domain |> 
  map(match_tld_in_email_domain) |> 
  unlist()

```

  10) Ajout à la table d'information renommée `tbl_emails`
  
```{r}

tbl_emails <- tbl_emails_in_authorsR |> 
  mutate(tld = mail_tlds)

```

  11) Sauvegarde des informations sur les adresses de messagerie
  
```{r}
#| label: save_tbl_emails
#| code-fold: true
#| 
saveRDS(
  object = tbl_emails,
  file = paste(Sys.Date(),"tbl_emails.RDS", sep = "_")
)

```

  12) Décompte des `email_id`, `email_domain` et `tld`

```{r}
#| label: emails_count
#| echo: false

emails <- tbl_emails |> 
  filter(!is.na(email_id) & !is.na(email_domain)) |> 
  mutate(email = paste(email_id, email_domain, sep = "@")) |> 
  select("Package", "email")

pdb_emails_total <- nrow(emails)
pdb_emails_count <- length(unique(emails$email))
pdb_mail_servers_count <- tbl_emails |> 
  select(email_domain) |> 
  filter(!is.na(email_domain)) |>
  unique() |> 
  nrow()
pdb_tlds_count <- tbl_emails |> 
  select(tld) |> 
  filter(!is.na(tld)) |>
  unique() |> 
  nrow()

```

::: {.callout-note collapse="false"}

Sur les `r pdb_emails_total` recensés on dénombre :

- `r pdb_emails_count` emails différents, 
- `r pdb_mail_servers_count` serveurs de messagerie différents,
- `r pdb_tlds_count` TLD différents,
  
:::

  13) Rapport sur les emails
  
  - classement du nombre d'emails (dans le champ `Authors@R`) par package R
  
```{r}
#| label: email_per_pkg 

tbl_emails |> 
  summarize(email_per_pkg = n(), .by = "Package") |>  
  arrange(desc(email_per_pkg)) |>
  print(n = 20)

```

  - classement par occurrences d'emails

```{r}
#| label: email_occurrences

email_occurrences <- emails |> 
  summarize(n = n(), .by = "email") |>
  arrange(desc(n), email)

gt_email_occurrences <- gt(email_occurrences |> dplyr::filter(n >= 30)) |> 
  tab_header(
    title    = md("**Email in packages db sorted by occurrences**"),
    subtitle = md(paste("**( email displayed only for n >= 30 )**"))
  ) |> 
  tab_footnote(
    footnote  = md(paste("Données valables pour le ", Sys.Date())),
    locations = cells_column_labels()
  )

gt_email_occurrences
  
```

  - graphe log log

```{r}

table_email_occurrences <- table(email_occurrences$n)
tbl_email_occurences <- table_email_occurrences |> 
  as.matrix() |> 
  as_tibble() |> 
  dplyr::mutate(n = as.numeric(dimnames(table_email_occurrences)[[1]])) |> 
  rename(frequence = V1)

ggplot(data = tbl_email_occurences) +
  geom_point(aes(x = log(n), y = log(frequence))) +
  geom_smooth(method = 'lm', aes(x = log(n), y = log(frequence))) +
  labs(
    title = "Log-log graph relatively to email occurrence frequencies",
    x = "email occurrences (log scale)",
    y = "frequency (log scale)"
  )


eq <- lm(log(frequence) ~ log(n), data = tbl_email_occurences)

eq$coefficients

```

::: {.callout-note collapse="false"}

Soit `n` le nombre d'occurrences d'un email

Soit `freq` le nombre d'emails apparaissant avec cette occurrence `n`

On a $$log(freq) = a \times log(n) + b$$
Soit $$freq = exp(b) \times n^a$$

avec $a =$ `r eq$coefficients[[2]]` et $b =$ `r eq$coefficients[[1]]`
  
:::

  14) Rapport sur les noms de domaines
  
  - classement par occurrences de serveurs de messagerie

```{r}
#| label: mail_server_occurrences

mail_server_occurrences <- tbl_emails |>
  select(email_id, email_domain) |> 
  filter(!is.na(email_id) & !is.na(email_domain)) |>
  unique() |> 
  summarize(n = n(), .by = "email_domain") |>
  arrange(desc(n), "email_domain")

gt_mail_server_occurrences <- gt(mail_server_occurrences |> 
                                   dplyr::filter(n >= 50)) |> 
  tab_header(
    title    = md("**Mail server in packages db sorted by occurrences**"),
    subtitle = md(paste("**( Mail server displayed only for n >= 50 )**"))
  ) |> 
  tab_footnote(
    footnote  = md(paste("Données valables pour le ", Sys.Date())),
    locations = cells_column_labels()
  )

gt_mail_server_occurrences
  
```

  - classement par occurrences de TLD

```{r}
#| label: TLD_occurrences

TLD_occurrences <- tbl_emails |> 
  select(email_id, email_domain, tld) |> 
  filter(!is.na(email_id) & !is.na(email_domain)) |> 
  unique() |> 
  summarize(n = n(), .by = "tld") |>
  arrange(desc(n), tld)

gt_TLD_occurrences <- gt(TLD_occurrences |> dplyr::filter(n >= 100)) |> 
  tab_header(
    title    = md("**Mail server TLDs in packages db sorted by occurrences**"),
    subtitle = md(paste("**( Mail server TLD displayed only for n >= 100 )**"))
  ) |> 
  tab_footnote(
    footnote  = md(paste("Données valables pour le ", Sys.Date())),
    locations = cells_column_labels()
    )

gt_TLD_occurrences
  
```

### Trouver les paquets selon difféntes info contenues dans l'email

  1) via l'email en entier

```{r}
#| label: find_pkgs_by_email

find_pkgs_by_email <- function(email_id) {
  
  resultat <- emails |>
  filter(email == email_id) |>
  select(Package) |>
  distinct() |> 
  arrange() |> 
  pull()
  
  return(resultat)
  
}

email_id <- "hadley@posit.co"
find_pkgs_by_email(email_id)

```

  2) via le nom de domaine
  
```{r}
#| label: find_pkgs_by_domain

find_pkgs_by_domain <- function(domain) {
  
  resultat <- tbl_emails |>
  dplyr::filter(email_domain == domain) |>
  select(Package) |>
  distinct() |> 
  arrange() |> 
  pull()
  
  return(resultat)
  
}

domain <- "thinkr.fr"
find_pkgs_by_domain(domain)

```

  3) via le tld du nom de domaine
  
```{r}
#| label: find_pkgs_by_tld

find_pkgs_by_tld <- function(tld_id) {
  
  resultat <- tbl_emails |>
  dplyr::filter(tld == tld_id) |>
  select(Package) |>
  distinct() |> 
  arrange() |> 
  pull()
  
  return(resultat)
  
}

tld_id <- "fr"
find_pkgs_by_tld(tld_id) |> length()

```




