---
title: "R CRAN Packages (emails in `Authors@R` column)"
author: "Alcor"
date: "2025-01-19"
categories: [news, code, analysis]
image: "image.jpg"
---

## Récupération des données emails dans la colonne `Authors@R`

```{r}
#| label: load_libraries
#| code-fold: true
#| warning: false
#| 
library(purrr)
library(tools)
library(dplyr)
library(tibble)
library(ggplot2)
library(stringi)
library(gt)
```

### Simplification du data.frame d'étude

::: {.callout-note collapse="false"}

Champs conservés dans le data.frame des données relatives aux paquets R sont :

  - ceux pour lesquels on ne trouve aucune données de type `NA`,
  - excepté le champ `Authors@R` dont on peut extraire des données pertinentes

Au final sont conservés les champs suivants :
  
  - `Package`          : nom du paquet
  - `Version`          : version en cours
  - `Depends`          : dépendances
  - `License`          : licence associée à l'usage du paquet
  - `MD5sum`           : somme de hachage MD5
  - `NeedsCompilation` : nécessité d'une compilation à partir des sources
  - `Author`           : auteur principal
  - `Authors@R`        : informations complémentaires sur les contributeurs
  - `Date/Publication` : timestamp de publication de version
  - `Description`      : description
  - `Maintainer`       : responsable
  - `Packaged`         : date de finalisation
  - `Title`            : titre
  - `Published`        : date de publication
  
:::

```{r}
#| label: CRAN_package_db_simplified
#| code-fold: true
#| 
pdb_CRAN <- tools::CRAN_package_db()

fields <- c(
  "Package", "Version", "Depends", "License", "MD5sum", 
  "NeedsCompilation", "Author", "Authors@R", "Date/Publication", 
  "Description", "Maintainer", "Packaged", "Title", "Published")

pdb <- pdb_CRAN |> 
  dplyr::select(all_of(fields))

```

### Nombre possible de mails présents dans la colonne `Authors@R`

```{r}
#| label: emails_total_estimated
#| code-fold: true

emails_count_per_pkg <- pdb$`Authors@R` |> 
  stri_count_regex(pattern = "[@]")

# NA result is transformed into a 0 value
emails_count_per_pkg[is.na(emails_count_per_pkg)] <- 0

emails_total_estimated <- emails_count_per_pkg |> sum()

```

Le nombre d'adresses de messagerie possiblement exploitables correspond au nombre de symboles `@` présents dans l'ensemble des données de la colonne `Authors@R`, soit ici : **`r format(x = emails_total_estimated, digits = 5, nsmall = 0)`**

### Extraction des emails

La fonction `match_email_in_authors` se base sur une expression régulière empirique qui pourra être sensiblement optimisée sur la base de nouvelles connaissances acquises dans ce domaine et des formatages spécifiques adoptés ponctuellement par certains membres de la communauté R.

Le résultat de la fonction `match_email_in_authors` est une matrice de correspondances. 

```{r}
#| label: match_emails_in_authorsR
#| 
match_emails_in_authorsR <- function(str) {
  
  pattern_email <- "[\"|'|[ ]|[<]]([^\"|']+?)[@]{1}(.+?)[\"|'|[ ]|[>]]"
  resultat <- stringi::stri_match_all_regex(
              str = str, 
              pattern = pattern_email,
              omit_no_match = FALSE)[[1]]
  
  return(resultat)

}

```

`emails_in_authorsR` contient une liste de matrices de correspondances

```{r}
#| label: extract_emails
#| 
emails_in_authorsR <- pdb$`Authors@R` |> 
  map(match_emails_in_authorsR)

head(emails_in_authorsR, n = 4)

```

### Récupération du nombre de lignes pour chacune des matrices 

`match_lines_per_pkg` donne, pour chaque paquet, le nombre de lignes de la matrice de correspondances

```{r}
#| label: match_lines_per_pkg

match_lines_per_pkg <- emails_in_authorsR |> 
  map(nrow) |>
  unlist()

match_lines_per_pkg[1:100]

```

### Transformation des `r nrow(pdb)` matrices en une seule matrice

```{r}
#| label: single_matrix

single_matrix <- do.call(rbind, emails_in_authorsR)

```

### Ajout des champs `Package`, `Version` et `Depends` + mutation en `tibble`

Le tibble `tbl_all_emails_in_authorsR` contient l'ensemble des emails pour chaque package (doublons compris).

```{r}
#| label: append_data_mutate_into_tibble
#| 
tbl_all_emails_in_authorsR <- cbind(
  rep(x = pdb$Package, match_lines_per_pkg),
  rep(x = pdb$Version, match_lines_per_pkg),
  rep(x = pdb$Depends, match_lines_per_pkg),
  single_matrix[,c(2,3)]) |> 
  as_tibble() |> 
  rename(Package  = V1,
         Version  = V2,
         Depends  = V3,
         email_id = V4,
         email_domain = V5)

tbl_all_emails_in_authorsR[1:10, c(1, 2, 4, 5)] |> gt()

```

### Création d'un tibble sans les emails doublons 

`tbl_unique_emails_in_authorsR` contient des emails non redondants

```{r}
#| label: tbl_unique_emails_in_authorsR

tbl_unique_emails_in_authorsR <- tbl_all_emails_in_authorsR |> unique()

```

### Comparatif du nombre d'emails trouvés par rapport au nombre estimé
  
::: {.callout-important collapse="false"}

Le champ **`emails_count`** du tibble `donne le nombre total d'adresses de messagerie, adresses dupliquées comprises.

:::

```{r}
#| label: summary_emails_per_pkg
#| code-fold: true
#| 
summary_emails_per_pkg <- tbl_all_emails_in_authorsR |> 
  mutate(n = if_else(is.na(email_id) & is.na(email_domain), 0, 1)) |> 
  summarize(.by = c(Package, Version, Depends), emails_count = sum(n)) |> 
  mutate(emails_count_estimated = emails_count_per_pkg) |> 
  mutate(diff_emails_count = emails_count_estimated - emails_count)

summary_emails_per_pkg[1:10, ] |> gt() 

total_emails_count <- summary_emails_per_pkg |> 
  summarize(total_emails = sum(emails_count)) |> 
  pull()

```

Le nombre total d'adresse de messagerie trouvées (doublons compris) vaut **`r format(x = total_emails_count, digits = 5, nsmall = 0)`** à comparer avec les **`r format(x = emails_total_estimated, digits = 5, nsmall = 0)`** symboles `@` découverts dans l'ensemble des champs `Authors@R`

### Récupération des lignes où le nombre d'emails n'est pas celui espéré
  
On compare la valeur du champ `emails_count` à celle du champ `emails_count_estimated`
(Parce que les adresses doublons sont considérées comme adresses valides)

```{r} 
#| label: tbl_diff_emails_count_non_zero
#| code-fold: true

tbl_diff_emails_count_non_zero <- summary_emails_per_pkg |> 
  filter(diff_emails_count != 0)

diff_emails_count <- tbl_diff_emails_count_non_zero |> 
  summarize(difference_totale = sum(diff_emails_count))

tbl_diff_emails_count_non_zero |> 
  select(Package, emails_count, emails_count_estimated, diff_emails_count) |> 
  gt()

```

L'examen des champs `Authors` associés aux packages `r names(tbl_diff_emails_count_non_zero$Package)` montre que le nombre d'emails a été surestimé par rapport au décompte du nombre de symboles `@`.

Il existe `r diff_emails_count` expressions contenant un symboles `@` qui ne correspondent pas à des adresses de messagerie.

En effet, on note la présence d'items au format `@<chaine de caractères>` qui ne respectent pas la norme.

### Affichage des items comportant des symboles `@` qui ne sont pas des emails 

```{r}
#| label: select_not_email_items
#| code-fold: true
#| 
select_not_email_items <- function(pkg) {
  
  not_email_items <- tbl_diff_emails_count_non_zero |> 
    left_join(pdb, by = c("Package", "Version", "Depends")) |> 
    filter(Package == pkg) |> 
    select(Package, `Authors@R`) |> 
    pull() |> 
    stri_match_all_regex(pattern = "[\"|\'|[ ]]([@][A-Za-z\\.\\-]+)")
  return(not_email_items[[1]][,2])
  
}

tbl_pkg_with_not_email_items <- tbl_diff_emails_count_non_zero |> 
  rowwise() |> 
  mutate(
    not_email_items = list(select_not_email_items(pkg = Package)),
    count = list(length(not_email_items)),
    count = ifelse(any(is.na(not_email_items)), 0, count)
  ) |> 
  select(Package, not_email_items, count)

tbl_pkg_with_not_email_items |> 
  gt() |> 
  tab_header(
    title    = md("**Packages with not email items including `@` symbol**"),
    subtitle = md(paste("Total = ", sum(tbl_pkg_with_not_email_items$count)))
  )

```

### Extraction des TLDs

La fonction `match_tld_in_email_domain` récupère le TLD (Top Level Domain)

```{r}
#| label: match_tld_in_email_domain
#| 
match_tld_in_email_domain <- function(str) {
  
  pattern_tld    <- "([^[.]]+$)"
  resultat <- stringi::stri_match_all_regex(
              str = str, 
              pattern = pattern_tld,
              omit_no_match = FALSE)[[1]]
  
  return(resultat[,2])

}

```

### Création du tibble `tbl_emails` à partir de `tbl_unique_emails_in_authorsR`

On rajoute seulement le champ `tld`

```{r}
#| label: extract_TLD

tbl_emails <- tbl_unique_emails_in_authorsR |>
  rowwise() |> 
  mutate(tld = match_tld_in_email_domain(email_domain)) |> 
  as_tibble() # else it causes error with summarize function
              # Can't supply `.by` when `.data` is a rowwise data frame.
              # because of rowwise_df class

```

### Sauvegarde des informations sur les adresses de messagerie
  
```{r}
#| label: save_tbl_emails
#| code-fold: true
#| 

################ TO DO

```

#### Décompte des `email_id`, `email_domain` et `tld`

```{r}
#| label: emails_count
#| echo: false

emails <- tbl_emails |> 
  filter(!is.na(email_id) & !is.na(email_domain)) |> 
  mutate(email = paste(email_id, email_domain, sep = "@")) |> 
  select("Package", "Version", "email")

pdb_emails_total <- nrow(emails)
pdb_emails_count <- length(unique(emails$email))
pdb_mail_servers_count <- tbl_emails |> 
  select(email_domain) |> 
  filter(!is.na(email_domain)) |>
  unique() |> 
  nrow()
pdb_tlds_count <- tbl_emails |> 
  select(tld) |> 
  filter(!is.na(tld)) |>
  unique() |> 
  nrow()

```

::: {.callout-note collapse="false"}

Sur les `r pdb_emails_total` recensés on dénombre :

- `r pdb_emails_count` emails différents, 
- `r pdb_mail_servers_count` serveurs de messagerie différents,
- `r pdb_tlds_count` TLD différents,
  
:::

#### Rapport sur les emails
  
  - classement du nombre d'emails (dans le champ `Authors@R`) par package R
  
```{r}
#| label: email_per_pkg 

tbl_emails |> 
  summarize(email_per_pkg = n(), .by = "Package") |>  
  arrange(desc(email_per_pkg)) |>
  print(n = 20)

```

  - classement par occurrences d'emails

```{r}
#| label: email_occurrences

email_occurrences <- emails |> 
  summarize(n = n(), .by = "email") |>
  arrange(desc(n), email)

gt_email_occurrences <- gt(email_occurrences |> dplyr::filter(n >= 30)) |> 
  tab_header(
    title    = md("**Email in packages db sorted by occurrences**"),
    subtitle = md(paste("**( email displayed only for n >= 30 )**"))
  ) |> 
  tab_footnote(
    footnote  = md(paste("Données valables pour le ", Sys.Date())),
    locations = cells_column_labels()
  )

gt_email_occurrences
  
```

  - graphe log log

```{r}

table_email_occurrences <- table(email_occurrences$n)
tbl_email_occurences <- table_email_occurrences |> 
  as.matrix() |> 
  as_tibble() |> 
  dplyr::mutate(n = as.numeric(dimnames(table_email_occurrences)[[1]])) |> 
  rename(frequence = V1)

ggplot(data = tbl_email_occurences) +
  geom_point(aes(x = log(n), y = log(frequence))) +
  geom_smooth(method = 'lm', aes(x = log(n), y = log(frequence))) +
  labs(
    title = "Log-log graph relatively to email occurrence frequencies",
    x = "email occurrences (log scale)",
    y = "frequency (log scale)"
  )


eq <- lm(log(frequence) ~ log(n), data = tbl_email_occurences)

eq$coefficients

```

::: {.callout-note collapse="false"}

Soit `n` le nombre d'occurrences d'un email

Soit `freq` le nombre d'emails apparaissant avec cette occurrence `n`

On a $$\ln(freq) = a \times \ln(n) + b$$

Soit $$e^{\ln(freq)} = e^{a \times \ln(n)} \times e^b$$

Soit $$freq = e^{\ln(n^a)} \times e^b$$ 

Soit $$freq = n^a \times e^b$$

avec $a =$ `r eq$coefficients[[2]]` et $b =$ `r eq$coefficients[[1]]`
  
:::

#### Rapport sur les noms de domaines
  
  - classement par occurrences de serveurs de messagerie

```{r}
#| label: mail_server_occurrences

mail_server_occurrences <- tbl_emails |>
  select(email_id, email_domain) |> 
  filter(!is.na(email_id) & !is.na(email_domain)) |>
  unique() |> 
  summarize(n = n(), .by = "email_domain") |>
  arrange(desc(n), "email_domain")

gt_mail_server_occurrences <- gt(mail_server_occurrences |> 
                                   dplyr::filter(n >= 50)) |> 
  tab_header(
    title    = md("**Mail server in packages db sorted by occurrences**"),
    subtitle = md(paste("**( Mail server displayed only for n >= 50 )**"))
  ) |> 
  tab_footnote(
    footnote  = md(paste("Données valables pour le ", Sys.Date())),
    locations = cells_column_labels()
  )

gt_mail_server_occurrences
  
```

  - classement par occurrences de TLD

```{r}
#| label: TLD_occurrences

TLD_occurrences <- tbl_emails |> 
  select(email_id, email_domain, tld) |> 
  filter(!is.na(email_id) & !is.na(email_domain)) |> 
  unique() |> 
  summarize(n = n(), .by = "tld") |>
  arrange(desc(n), tld)

gt_TLD_occurrences <- gt(TLD_occurrences |> dplyr::filter(n >= 100)) |> 
  tab_header(
    title    = md("**Mail server TLDs in packages db sorted by occurrences**"),
    subtitle = md(paste("**( Mail server TLD displayed only for n >= 100 )**"))
  ) |> 
  tab_footnote(
    footnote  = md(paste("Données valables pour le ", Sys.Date())),
    locations = cells_column_labels()
    )

gt_TLD_occurrences
  
```

### Trouver les paquets selon difféntes info contenues dans l'email

#### via l'email en entier

```{r}
#| label: find_pkgs_by_email

find_pkgs_by_email <- function(email_id) {
  
  resultat <- emails |>
  filter(email == email_id) |>
  select(Package) |>
  distinct() |> 
  arrange() |> 
  pull()
  
  return(resultat)
  
}

email_id <- "hadley@posit.co"
find_pkgs_by_email(email_id)

```

#### via le nom de domaine
  
```{r}
#| label: find_pkgs_by_domain

find_pkgs_by_domain <- function(domain) {
  
  resultat <- tbl_emails |>
  dplyr::filter(email_domain == domain) |>
  select(Package) |>
  distinct() |> 
  arrange() |> 
  pull()
  
  return(resultat)
  
}

domain <- "thinkr.fr"
find_pkgs_by_domain(domain)

```

#### via le tld du nom de domaine
  
```{r}
#| label: find_pkgs_by_tld

find_pkgs_by_tld <- function(tld_id) {
  
  resultat <- tbl_emails |>
  dplyr::filter(tld == tld_id) |>
  select(Package) |>
  distinct() |> 
  arrange() |> 
  pull()
  
  return(resultat)
  
}

tld_id <- "fr"
find_pkgs_by_tld(tld_id) |> length()

```




