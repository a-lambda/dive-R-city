---
title: "Derniers paquets publiés sur le dépôt CRAN"
description: |
  Données relatives aux paquets publiés la veille
author: "Alcor"
date: "2025-01-18"
categories: [code, analysis, CRAN]
image: "image.jpg"
---

```{r}
#| label: load_libraries
#| code-fold: true
#| warning: false
#| 
library(purrr)
library(tools)
library(dplyr)
library(tibble)
library(lubridate)
library(gt)
library(glue)
library(RPostgres)

```

## Récupération des données `packages` du CRAN

```{r}
#| label: CRAN_package_db
#| 
pdb <- tools::CRAN_package_db()

```

## Récupération des derniers paquets publiés

On se base sur la date de publication issue du timestamp provenant du champ `Date\Publication`
  
```{r}
#| label: published_field
#| code-fold: true

cran_repo <- "https://cran.r-project.org/web/packages/"

last_pkg_published <- pdb |> 
  select(Package, Version, `Date/Publication`) |> 
  filter(
    date(ymd_hms(`Date/Publication`)) == (Sys.Date() - 1)
  ) |> 
  arrange(desc(`Date/Publication`), Package, Version) |>
  rename(
    paquet = Package,
    version = Version,
    date_publication = `Date/Publication`
  ) |> 
  mutate(lien = paste0(cran_repo, paquet),
    lien = glue::glue("[{paquet}]({lien})"))
         
gt_last_pkg_published <- last_pkg_published |> 
  mutate(lien = map(lien, md)) |> 
  gt() |>   
  tab_header(
    title    = md("**Derniers paquets publiés**"),
    subtitle  = md(paste("Total =", nrow(last_pkg_published))),
  ) 

gt_last_pkg_published

```

## Sauvegarde des derniers paquets publiés

### Etablissement de la connexion `postgresql`
  
```{r}
#| label: create_conn
#| code-fold: true

DB_HOSTNAME <- Sys.getenv("DB_HOSTNAME")
DB_USER <- Sys.getenv("DB_USER")
DB_PASSWORD <- Sys.getenv("DB_PASSWORD")
DB_PORT <- Sys.getenv("DB_PORT")
DB_NAME <- Sys.getenv("DB_NAME")

conn <- RPostgres::dbConnect(
  drv = RPostgres::Postgres(), 
  dbname = DB_NAME,
  host = DB_HOSTNAME,
  port = DB_PORT,
  user = DB_USER,
  password = DB_PASSWORD
)

```
  
### Bascule sur le schéma `dev` par défaut
  
```{r}
#| label: set_schema_default
#| code-fold: true
#| message: false

query <- paste(
  "ALTER DATABASE",
  DB_NAME,
  "SET SEARCH_PATH TO dev;"
)
RPostgres::dbSendQuery(
  conn,
  query
)

```

### Ajout des nouveaux paquets R à la table `paquets`

::: {.callout-note collapse="false"}

La table `paquets` a été créée en avance de phase avec les requêtes SQL :

```SQL
CREATE SCHEMA dev;

CREATE TABLE dev.paquets(
  id SERIAL PRIMARY KEY,
  paquet VARCHAR(50) NOT NULL,
  version VARCHAR(20) NOT NULL,
  date_publication TIMESTAMP NOT NULL, 
  lien VARCHAR(100),
  UNIQUE(paquet, version));
```
:::

```{r}
#| label: add_info_last_pkg_to_psql_table
#| code-fold: true
#| message: false
#| 

request <- "SELECT date_publication::date
            FROM dev.paquets
            ORDER by date_publication::date DESC
            LIMIT 1";

date_veille <- RPostgres::dbGetQuery(conn, statement = request) |>  pull()

diff_date <- as.numeric(Sys.Date() - date_veille)

if ((Sys.Date() - date_veille) > 1) {
  RPostgres::dbAppendTable(
    conn = conn, 
    name = Id(schema = 'dev', table = 'paquets'), 
    value = last_pkg_published
  )
}

```

### Vérification des ajouts d'information dans la table `paquets`

```{r}
#| label: verif_data_inserted
#| code-fold: true
#| message: false

request <- "SELECT COUNT(DISTINCT paquet) AS total_paquets
            FROM dev.paquets";

total_paquets <- RPostgres::dbGetQuery(conn, statement = request)$total_paquets

request <- "SELECT MAX(date_publication::date) -
                   MIN(date_publication::date) + 
                   1 AS duree
           FROM dev.paquets;"

duree <- RPostgres::dbGetQuery(conn, statement = request)$duree

request <- "SELECT count(paquet) AS nb_paquets, date_publication::date,
            SUM(COUNT(paquet)) OVER (ORDER BY date_publication::date) AS total
            FROM dev.paquets
            GROUP BY date_publication::date;"

result <- RPostgres::dbGetQuery(conn, statement = request)

gt(result) |> tab_header(
  title    = md(paste("**Total des versions de paquets sur", duree, "jours**")),
  subtitle = md(paste("(sur", total_paquets, "paquets versionnés)"))
)

```

### Sélection des paquets ayant été versionné plus d'une fois depuis

```{r}
#| label: versioned_more_than_once
#| code-fold: true
#| message: false

request <- "SELECT MIN(date_publication)::date AS date_min
            FROM dev.paquets;"

date_min <- RPostgres::dbGetQuery(conn, statement = request)$date_min

request <- "SELECT paquet, version, date_publication, 
           RANK() OVER(PARTITION BY paquet ORDER BY version) AS revision 
           FROM dev.paquets 
           WHERE paquet IN (
	           SELECT paquet 
	           FROM (
		           SELECT COUNT(*), paquet 
		           FROM dev.paquets 
		           GROUP by paquet 
		       HAVING COUNT(*) > 1
	           )
           );"

result <- RPostgres::dbGetQuery(conn, statement = request)

gt(result) |> 
  tab_header(
    title    = md("**Paquets versionnés plus d'une fois**"),
    subtitle = md(paste0("(depuis le ", as.Date(date_min), ")"))
  )

```

### Affichage des paquets déjà enregistrés avec leur lien CRAN
  
```{r}
#| label: paquet_with_CRAN_links
#| code-fold: true
#| message: false

request <- "SELECT MIN(date_publication)::date AS date_min
            FROM dev.paquets;"

date_min <- RPostgres::dbGetQuery(conn, statement = request)$date_min

request <- "SELECT ROW_NUMBER() OVER(ORDER BY paquet) AS rang, paquet, version, lien
            FROM (
                SELECT DISTINCT ON (paquet) dev.paquets.*
                FROM dev.paquets
                ORDER BY paquet, version DESC
                );"

result <- RPostgres::dbGetQuery(conn, statement = request)

tab <- result |> 
  mutate(lien = map(lien, md)) |> 
  gt() |> 
  tab_header(
    title    = md("**Liens vers le dépôt CRAN des paquets déjà versionnés**"),
    subtitle = md(paste("**(", 
                        total_paquets,
                        "depuis le", 
                        as.Date(date_min),
                        ")**")
                  )
  ) 

tab

```


```{r}
#| label: latest_versions
#| code-fold: true
#| message: false

# dernière version de chaque paquet enregistré dans la base
request <- "WITH rankedpackages AS (
	            SELECT
		          paquet,
		          version,
		          ROW_NUMBER() OVER (
		            PARTITION BY paquet ORDER BY version DESC
		            ) AS row_num
	            FROM dev.paquets
            )
            SELECT paquet, version
            FROM rankedpackages
            WHERE row_num = 1;"

result <- RPostgres::dbGetQuery(conn, statement = request)

tab <- result |> 
  gt() |> 
  tab_header(
    title    = md("**Dernières versions des paquets enregistrés**"),
    subtitle = md(paste0("(depuis le ", as.Date(date_min), ")"))
  ) 

```

### Déconnexion

```{r}
#| label: dbDisconnect
#| code-fold: true
#| message: false

RPostgres::dbDisconnect(conn)

```

